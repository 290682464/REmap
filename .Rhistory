}
data = na.omit(data)
if(ncol(data)<3 | nrow(data) == 0 ){
stop("Data should have at least 3 columns and 1 row")
}
if(!is.numeric(data[1,1]) |
!is.numeric(data[1,2]) |
!is.numeric(data[1,3])){
stop("Every column should be numeric!")
}
heatdata = apply(data,1,function(x){
out = sprintf('[%s,%s,%s]',x[1],x[2],x[3])
return(out)
})
heatdata = paste(heatdata,collapse = ",\n")
# mapnames = mapNames(mapType = maptype)
#   hit = sum(sapply(data[,1],function(x)
#               sum(x %in% mapnames)))/length(mapnames)
#
#   if(hit<0.5){
#     warning(paste0("Over 50% places(column 1) are not found in ",maptype))
#   }
#   mapCVec = apply(data,1,function(x)
#     paste0("{name:'",x[1],
#            "',value:",x[2],"}" ))
#   mapCData = paste(mapCVec,collapse = ',\n\t\t')
if(class(color) != 'character'){
stop("Color should be a character object!")
}
if(length(color) == 1){
color = c(color,'white')
}
ColorData = paste0("['",paste(color,collapse = "', '"),"']")
#   if(is.na(maxdata)){
#     maxData = round(max(data[,2]) +
#                       (max(data[,2])- min(data[,2]))/15)
#   }else{
#     maxData = maxdata
#   }
#
#   if(is.na(mindata)){
#     minData = round(min(data[,2]) -
#                       (max(data[,2])- min(data[,2]))/15)
#   }else{
#     minData = mindata
#   }
heatMapStrData = heatMapStr(blurSize = blurSize,
colors =  ColorData,
minAlpha = minAlpha,
opacity = opacity)
markLineLogi = (length(dim(markLineData)) ==2)
markPointLogi = class(markPointData)!='logical'
geoDataLogi = class(geoData)!='logical'
if(markLineLogi & markPointLogi & !geoDataLogi){
cityNames = c(as.character(markLineData[,1]),
as.character(markLineData[,1]))
if(is.data.frame(markPointData)){
cityNames = c(cityNames,
as.character(markPointData[,1]))
}else{
# it's a vector
cityNames = c(cityNames,markPointData)
}
geoData = get_geo_position(unique(cityNames))
}
## Prepare for mark Line data
if(is.null(markLineData)){
markLineData = ""
}else{
markLineData = markLineStr(markLineData,
markLineTheme,
geoData)
}
## Prepare for mark point data
if(is.null(markPointData)){
markPointData = ""
}else{
markPointData = markPointStr(markPointData,
markPointTheme,
geoData)
}
if(maptype == 'world'){
theme$labelShow = 'false'
}
### write remap object
output = new("remap")
output@id = paste('ID', format(Sys.time(), "%Y%m%d%H%M%S"),
proc.time()[3]*100, sep="_")
output@theme = theme
output@maptype = "SVG"
output@option = html.data.H$option
head = html.data.H$head
foot = html.data.H$foot
if(.Platform$OS.type == "windows"){
Sys.setlocale("LC_CTYPE",
"chs")
}
output@option = sub("forChange",
"ä¸€",output@option)
output@option = sub("heatMapData",
heatdata,output@option)
##V0.2: label&point
output@option = sub("labelShowData",
theme$labelShow,output@option)
output@option = sub("pointShowData",
theme$pointShow,output@option)
output@option = sub("pointColorData",
theme$pointColor,output@option)
## end V0.2
output@option = gsub("backgroundColorData",
theme$backgroundColor,output@option)
output@option = sub("titleData",title,output@option)
output@option = sub("subtitleData",subtitle,output@option)
output@option = gsub("titleColorData",
theme$titleColor,output@option)
# output@option = sub("minData",minData,output@option)
# output@option = sub("maxData",maxData,output@option)
# output@option = sub("colorData",ColorData,output@option)
output@option = sub("mapTypeData",maptype,output@option)
output@option = sub("borderColorData",
theme$borderColor,output@option)
output@option = sub("mapCData",mapCData,output@option)
output@option = sub("//markLineData",
markLineData,output@option)
output@option = sub("//markPointData",
markPointData,output@option)
output@option = sub("//heatMapStrData",
heatMapStrData,output@option)
output@option = strsplit(output@option,"kkkmmm")[[1]][2]
output@content =  paste(head,output@option,foot,sep = "\n")
if(.Platform$OS.type == "windows"){
Sys.setlocale("LC_CTYPE",locate)
}
return(output)
}
html.data.H = list(
head = "<html>
<head>
<meta charset=\"utf-8\">
<style type=\"text/css\">
body {
margin: 0;
}
#main {
height: 100%;
}
</style>
</head>
<body>
<div id=\"main\"></div>
<script src=\"http://echarts.baidu.com/build/dist/echarts.js\"></script>
<script src = \"http://echarts.baidu.com/build/dist/echarts-all.js\"></script>
<script>
var myChart = echarts.init(document.getElementById(\"main\"));
" ,
option = "forChangekkkmmm
var heatData = [heatMapData]
var options = {
backgroundColor: 'backgroundColorData',
color: ['pointColorData','aqua','lime'],
title : {
text: 'titleData',
subtext:'subtitleData',
x:'center',
textStyle : {
color: 'titleColorData'
}
},
tooltip : {
trigger: 'item',
formatter: function (v) {
if(v[2].tooltipValue!=null){
return v[2].tooltipvalue;
}else{
return v[1];
}
}},
legend: {
show:pointShowData,
orient: 'vertical',
x:'left',
data:['Data'],
textStyle:{color:'backgroundColorData'}
},
toolbox: {
show : true,
orient : 'vertical',
x: 'right',
y: 'center',
feature : {
mark : {show: true},
dataView : {show: true, readOnly: false},
restore : {show: true},
saveAsImage : {show: true}
}
},
dataRange: {
//min : minData,
//max : maxData,
calculable : true,
textStyle:{
color:'titleColorData'
}
},
series : [
{
name:'Data',
type:'map',
mapType: 'mapTypeData',
roam = true,
itemStyle:{
normal:{
borderColor:'borderColorData',
borderWidth: 0.5,
label:{show:labelShowData,textStyle:{color:'titleColorData'}},
},
emphasis:{label:{show:true,textStyle:{color:'titleColorData'}}}
},
data:[]
//heatMapStrData
//markLineData
//markPointData
}]
}",
foot = ";
myChart.setOption(options);
</script>
</body>
</html>"
)
heatmapStr = function(blurSize ,
colors ,
minAlpha ,
opacity
){
out =   sprintf(",heatmap: {
blurSize:%s ,
colors:%s ,
minAlpha:%s ,
opacity:%s ,
data: heatData}",
blurSize,
colors,
minAlpha,
opacity)
return(out)
}
remapH(heatmapdata)
heatmapdata[1,]
is.numeric(data[1,1])
heatmapdata[1,1]
load("R/remapH.R")
source("R/remapH.R")
remapH(heatmapdata)
source("R/remapH.R")
remapH(heatmapdata)
heatmapStr = function(blurSize ,
colors ,
minAlpha ,
opacity
){
out =   sprintf(",heatmap: {
blurSize:%s ,
colors:%s ,
minAlpha:%s ,
opacity:%s ,
data: heatData}",
blurSize,
colors,
minAlpha,
opacity)
return(out)
}
remapH(heatmapdata)
source("R/remapH.R")
remapH(heatmapdata)
source("R/remapH.R")
remapH(heatmapdata)
source("R/remapH.R")
remapH(heatmapdata)
source("R/remapH.R")
remapH(heatmapdata)
?append
append(1:5, 0:1, after = 3)
append(1:5, 0:1)
append(iris,c(1,2,3,4,'a'))
for (j in 1:10) {
var x = 100 + runif() * 16
var y = 24 + runif() * 12
var cnt = 30 * runif()
for (i in 1:cnt) {
n = nrows(heatData)
heatData[(n+1),] = c(
x + runif() * 2,
y + runif() * 2,
runif()
)
}
}
for (j in 1:10) {
x = 100 + runif() * 16
y = 24 + runif() * 12
cnt = 30 * runif()
for (i in 1:cnt) {
n = nrows(heatData)
heatData[(n+1),] = c(
x + runif() * 2,
y + runif() * 2,
runif()
)
}
}
for (j in 1:10) {
x = 100 + runif(1) * 16
y = 24 + runif(1) * 12
cnt = 30 * runif(1)
for (i in 1:cnt) {
n = nrows(heatData)
heatData[(n+1),] = c(
x + runif(1) * 2,
y + runif(1) * 2,
runif(1)
)
}
}
for (j in 1:10) {
x = 100 + runif(1) * 16
y = 24 + runif(1) * 12
cnt = 30 * runif(1)
for (i in 1:cnt) {
n = nrow(heatData)
heatData[(n+1),] = c(
x + runif(1) * 2,
y + runif(1) * 2,
runif(1)
)
}
}
heatData = data.frame(
lon = 100 + runif(200,max = 20),
lat = 24 + runif(200,max = 16),
prob = runif(200)
)
for (j in 1:10) {
x = 100 + runif(1) * 16
y = 24 + runif(1) * 12
cnt = 30 * runif(1)
for (i in 1:cnt) {
n = nrow(heatData)
heatData[(n+1),] = c(
x + runif(1) * 2,
y + runif(1) * 2,
runif(1)
)
}
}
remapH(heatData)
save(heatData,file = "data/heat.rda")
mapdata = chinaIphone
warnings()
geoData  = get_geo_position(unique(demoC[demoC==demoC]))
out = remapC(data = mapdata,
color = c("white","white"),
theme=get_theme("none","white","white","white",'white'),
markPointData = demoC[,2],
markPointTheme = markPointControl(
symbol = "image://http://lchiffon.github.io/reveal_slidify/pic/ghost.png",
symbolSize = 50,
effectType = 'bounce' ),
geoData = geoData)
out
options
?options
.Options
getOption("remap")
getOption("remapJS")
options("remapJS")
options(remapJS = 'web')
getOption("remapJS")
tempdir()
?tempfile
tempfile("plot", fileext = c(".ps", ".pdf"))
sampleData = function(){
heatData = data.frame(
lon = 100 + runif(200,max = 20),
lat = 24 + runif(200,max = 16),
prob = runif(200)
)
for (j in 1:10) {
x = 100 + runif(1) * 16
y = 24 + runif(1) * 12
cnt = 30 * runif(1)
for (i in 1:cnt) {
n = nrow(heatData)
heatData[(n+1),] = c(
x + runif(1) * 2,
y + runif(1) * 2,
runif(1)
)
}
}
}
file = dir()
lis = list()
count = 0
for(i in file){
a = readLines(i)
count = count +length(a)
}
cat(count)
setwd("E:/git/REmap/R")
file = dir()
lis = list()
count = 0
for(i in file){
a = readLines(i)
count = count +length(a)
}
cat(count)
plot = remapC(chinaIphone,
markLineData = demoC,
markPointData = demoC[,2])
plot@content
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts.js",
"E:/git/echarts/build/dist/echarts.js",plot@content)
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts-all.js",
"E:/git/echarts/build/dist/echarts-all.js",plot@content)
plot
plot = remapC(chinaIphone,
markLineData = demoC,
markPointData = demoC[,2])
library(devtools)
load_all()
plot = remapC(chinaIphone,
markLineData = demoC,
markPointData = demoC[,2])
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts.js",
"E:\\git\\echarts\\build\\dist/echarts.js",plot@content)
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts-all.js",
"E:\\git\\echarts\\build\\dist/echarts-all.js",plot@content)
plot
plot = remapC(chinaIphone,
markLineData = demoC,
markPointData = demoC[,2])
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts.js",
"E:/git/echarts/build/dist/echarts.js",plot@content)
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts-all.js",
"E:/git/echarts/build/dist/echarts-all.js",plot@content)
plot
plot = remapC(chinaIphone,
markLineData = demoC,
markPointData = demoC[,2])
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts.js",
"E:/git/echarts/build/dists/echarts.js",plot@content)
plot@content  = sub("http://echarts.baidu.com/build/dist/echarts-all.js",
"E:/git/echarts/build/dist/echarts-all.js",plot@content)
plot
tempdir()
tempdir()
tempdir()
tempdir()
library(REmap)
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
?get_theme
remove.packages("REmap")
library(REmap)
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
library(REmap)
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
library("REmap", lib.loc="D:/Program Files/R/R-3.2.0/library")
remove.packages("REmap")
library("REmap", lib.loc="D:/Program Files/R/R-3.2.0/library")
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
library(REmap)
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
city
library(roxygen2)
setwd("E:/git")
roxygenise("REmap")
library("REmap", lib.loc="D:/Program Files/R/R-3.2.0/library")
detach("package:REmap", unload=TRUE)
remove.packages("REmap")
library(REmap)
?remapH
detach("package:REmap", unload=TRUE)
remove.packages("REmap")
library(REmap)
remapH
?remapH
heatmap = sampleData()
## This is a function to create sample data as
## http://echarts.baidu.com/doc/example/heatmap_map.html
remapH(heatmap,minAlpha = 0.1,title = "Heat Map from REmap")
getwd()
library(roxygen2)
setwd("E:/git")
roxygenise("REmap")
