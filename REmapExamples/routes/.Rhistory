# StationData
## 4输出echarts数据格式
con2echarts = function(list,stadata){
pointDF = list[[1]]
lineDF = list[[2]]
geoCoord1 = apply(pointDF,1,function(x)
paste0("'",x[3],"':[",x[1],",",x[2],"]"))
geoCoord1 = paste(geoCoord1,collapse = ",\n")
geoCoord2 = apply(stadata,1,function(x)
paste0("'",x[3],"':[",x[1],",",x[2],"]"))
geoCoord2 = paste(geoCoord2,collapse = ",\n")
geoCoord = paste(geoCoord1,",\n",geoCoord2)
markLine = apply(lineDF,1,function(x)
paste0("[{name:'",x[1],"'}, {name:'",x[2],
"',value:40}]" ))
markLine = paste(markLine,collapse = ",\n")
n = nrow(stadata)
i = 1:n
value =  dnorm(i,n/2,n/4)*1000 + rnorm(n,0,5)+10
stadata$value = round(value)
markpoint = apply(stadata,1,function(x)
paste0("{name:'",x[3],"',value:",x[4],"}"))
markpoint = paste(markpoint,collapse = ",\n")
return(list(geoCoord,markLine,markpoint))
}
## 4输出echarts数据格式,测试
# final.data = con2echarts(dat,StationData)
## 主函数:将线路信息转化为series对象,用于echarts绘制
GetLineEcharts = function(name,#name
origin, # 发车地,如:富锦路地铁站
destination,# 目的地,如:莘庄地铁站
input,#该线路的站点,自动从上海地铁网
#做清理
step = 2# Step number
){
## 获取线路信息
Line1_list = getGeoData(origin,destination)
## 清理线路信息
dat = cleanGeoData(name,
Line1_list,
step = step)
## 清理文本数据
input = gsub("[0-9]|\t|\n|:|-","",input)
input = strsplit(input," ")
input = input[[1]][input[[1]]!=""]
## 获取各个站点信息
StationData = data.frame(lon = 0,
lat = 0)
for ( i in 1:length(input)){
StationData[i,] = getStation(input[i])
}
StationData$name = input
## 输出echarts数据格式
final.data = con2echarts(dat,StationData)
output = paste0( "{
name:'",
name,"',
type:'map',
mapType: 'none',
data:[],
geoCoord: {",final.data[[1]],
"},
markLine : {
smooth:false,
symbolSize:[0,0],
effect : {
show:true,
scaleSize: 1,
period: 30,
color: '#fff',
shadowBlur: 10
},
itemStyle : {
normal: {
borderWidth:1,
label:{
show:false
},
lineStyle: {
type: 'solid',
shadowBlur: 10
}
}
},
data : [",
final.data[[2]],
" ]
},
markPoint : {
symbol:'emptyCircle',
symbolSize : function (v){
return 5 + v/10
},
effect : {
show:true,
shadowBlur : 0
},
itemStyle:{
normal:{
label:{show:false}
}
},
tooltip : {
show: true,
trigger: 'item'
},
data : [",
final.data[[3]],
" ]
}
},")
output
}
#
#
# input = "莘庄
# 外环路 	5:32 	6:02 	22:34 	23:32
# 莲花路 	5:34 	6:00 	22:36 	23:30
# 锦江乐园 	5:37 	5:57 	22:39 	23:27
# 上海南站 	4:55 	5:18 	5:54 	22:42 	23:24
# 漕宝路 	4:57 	5:20 	5:51 	22:45 	23:21
# 上海体育馆 	5:00 	5:23 	5:49 	22:48 	23:19
# 徐家汇 	5:02 	5:25 	5:46 	22:50 	23:16
# 衡山路 	5:04 	5:27 	5:44 	22:52 	23:14
# 常熟路 	5:06 	5:29 	5:42 	22:54 	23:12
# 陕西南路 	5:08 	5:31 	5:40 	22:56 	23:10
# 黄陂南路 	5:11 	5:34 	5:38 	22:58 	23:08
# 人民广场 	5:14 	5:37 	5:35 	23:01 	23:05
# 新闸路 	5:15 	5:38 	5:33 	23:03 	23:03
# 汉中路 	5:17 	5:40 	5:31 	23:05 	23:01
# 上海火车站 	5:19
# 中山北路 	--- 	5:45 	5:57 	23:10 	22:57
# 延长路 	--- 	5:48 	5:55 	23:13 	22:55
# 上海马戏城 	--- 	5:50 	5:53 	23:15 	22:53
# 汶水路 	--- 	5:52 	5:50 	23:17 	22:50
# 彭浦新村 	--- 	5:55 	5:47 	23:20 	22:47
# 共康路 	--- 	5:58 	5:45 	23:23 	22:45
# 通河新村 	--- 	6:00 	5:42 	23:25 	22:42
# 呼兰路 	--- 	6:03 	5:40 	23:27 	22:40
# 共富新村 	--- 	6:05 	5:37 	23:30 	22:37
# 宝安公路 	--- 	6:08 	5:34 	23:33 	22:34
# 友谊西路 	--- 	6:10 	5:32 	23:35 	22:32
# 富锦路"
#
# origin = "富锦路地铁站"
# destination  = "莘庄地铁站"
#
# js1.1 = GetLineEcharts("一号线",origin,destination,input)
input1 = "莘庄
外环路 	5:32 	6:02 	22:34 	23:32
莲花路 	5:34 	6:00 	22:36 	23:30
锦江乐园 	5:37 	5:57 	22:39 	23:27
上海南站 	4:55 	5:18 	5:54 	22:42 	23:24
漕宝路 	4:57 	5:20 	5:51 	22:45 	23:21
上海体育馆 	5:00 	5:23 	5:49 	22:48 	23:19
徐家汇 	5:02 	5:25 	5:46 	22:50 	23:16
衡山路 	5:04 	5:27 	5:44 	22:52 	23:14
常熟路 	5:06 	5:29 	5:42 	22:54 	23:12
陕西南路 	5:08 	5:31 	5:40 	22:56 	23:10
黄陂南路 	5:11 	5:34 	5:38 	22:58 	23:08
人民广场 	5:14 	5:37 	5:35 	23:01 	23:05
新闸路 	5:15 	5:38 	5:33 	23:03 	23:03
汉中路 	5:17 	5:40 	5:31 	23:05 	23:01
上海火车站 	5:19
中山北路 	--- 	5:45 	5:57 	23:10 	22:57
延长路 	--- 	5:48 	5:55 	23:13 	22:55
上海马戏城 	--- 	5:50 	5:53 	23:15 	22:53
汶水路 	--- 	5:52 	5:50 	23:17 	22:50
彭浦新村 	--- 	5:55 	5:47 	23:20 	22:47
共康路 	--- 	5:58 	5:45 	23:23 	22:45
通河新村 	--- 	6:00 	5:42 	23:25 	22:42
呼兰路 	--- 	6:03 	5:40 	23:27 	22:40
共富新村 	--- 	6:05 	5:37 	23:30 	22:37
宝安公路 	--- 	6:08 	5:34 	23:33 	22:34
友谊西路 	--- 	6:10 	5:32 	23:35 	22:32
富锦路"
origin1 = "富锦路地铁站"
destination1  = "莘庄地铁站"
input2 = "浦东国际机场 	6:00 	6:34
海天三路 	6:03 	6:31 	22:03 	22:31
远东大道 	6:10 	6:24 	22:10 	22:24
凌空路 	6:15 	6:19 	22:15 	22:19
川沙 	6:18 	6:15 	22:18 	22:15
华夏东路 	6:23 	6:11 	22:23 	22:11
创新中路 	6:26 	6:08 	22:26 	22:08
唐镇 	6:29 	6:04 	22:29 	22:04
广兰路 	6:34
金科路 	5:33 	6:25 	22:48 	23:40
张江高科 	5:35 	6:22 	22:50 	23:37
龙阳路 	5:21 	6:18 	22:54 	23:33
世纪公园 	5:22 	6:16 	22:56 	23:31
上海科技馆 	5:25 	6:14 	22:58 	23:29
世纪大道 	5:28 	6:11 	23:01 	23:26
东昌路 	5:30 	6:09 	23:03 	23:24
陆家嘴 	5:32 	6:07 	23:06 	23:22
南京东路 	5:35 	6:04 	23:08 	23:19
人民广场 	5:38 	6:02 	23:11 	23:17
南京西路 	5:40 	5:59 	23:13 	23:14
静安寺 	5:42 	5:57 	23:16 	23:12
江苏路 	5:45 	5:54 	23:18 	23:09
中山公园 	5:48 	5:52 	23:21 	23:07
娄山关路 	5:50 	5:49 	23:24 	23:04
威宁路 	5:53 	5:46 	23:26 	23:01
北新泾 	5:55 	5:44 	23:29 	22:59
淞虹路 	5:58 	5:42 	23:31 	22:57
虹桥2号航站楼  	6:05 	5:35 	23:38 	22:50
虹桥火车站 	6:07 	5:33 	23:40 	22:48
徐泾东"
origin2 = "浦东国际机场地铁站"
destination2  = "徐泾东地铁站"
input3 = "上海南站 	06:32
石龙路 	06:30 	05:27 	23:40 	22:32
龙漕路 	06:28 	05:30 	23:38 	22:35
漕溪路 	06:26 	05:32 	23:36 	22:37
宜山路 	06:23 	05:34 	23:33 	22:39
虹桥路 	06:21 	05:36 	23:31 	22:41
延安西路 	06:19 	05:39 	23:29 	22:44
中山公园 	06:17 	05:41 	23:27 	22:46
金沙江路 	06:14 	05:43 	23:24 	22:48
曹杨路 	06:12 	05:45 	23:22 	22:50
镇坪路 	06:10 	05:48
中潭路 	06:07 	05:50 	23:17 	22:55
上海站 	06:05 	05:53 	23:15 	22:58
宝山路 	06:01 	05:56 	23:11 	23:01
东宝兴路 	05:59 	05:58 	23:09 	23:03
虹口足球场 	05:57 	06:01 	23:07 	23:06
赤峰路 	05:54 	06:03 	23:04 	23:08
大柏树 	05:52 	06:05 	23:02 	23:10
江湾镇 	05:50 	06:08 	23:00 	23:13
殷高西路 	05:47 	06:10 	22:57 	23:15
长江南路 	05:44 	06:13 	22:54 	23:18
淞发路 	05:41 	06:15 	22:51 	23:20
张华浜 	05:39 	06:18 	22:49 	23:23
淞滨路 	05:37 	06:20 	22:47 	23:25
水产路 	05:35 	06:22 	22:45 	23:27
宝杨路 	05:32 	06:25 	22:42 	23:30
友谊路 	05:30 	06:27 	22:40 	23:32
铁力路 	05:27 	06:29 	22:37 	23:34
江杨北路"
origin3 = "江杨北路地铁站"
destination3  = "上海南站地铁站"
js1.3 = GetLineEcharts("3号线",origin3,destination3,input3,step = c(1,2))
htmlParse("http://api.map.baidu.com/direction/v1?mode=transit&origin=江杨北路地铁站&destination=上海南站地铁站&region=上海&output=json&ak=q9U1lWgCK1aBGVC1DVWrgWa7")
htmlParse("http://api.map.baidu.com/direction/v1?mode=transit&origin=江杨北路地铁站&destination=上海南站地铁站&region=上海&output=json&ak=q9U1lWgCK1aBGVC1DVWrgWa7")->doc
rootNode<-xmlRoot(doc)
rootNode
fromJSON(xpathSApply(rootNode,"//p",xmlValue))
fromJSON(xpathSApply(rootNode,"//p",xmlValue))$result$routes[[1]]
origin3 = "江杨北路站"
js1.3 = GetLineEcharts("3号线",origin3,destination3,input3,step = 2)
htmlParse("http://api.map.baidu.com/direction/v1?mode=transit&origin=江杨北路站&destination=上海南站地铁站&region=上海&output=json&ak=q9U1lWgCK1aBGVC1DVWrgWa7")->doc
rootNode<-xmlRoot(doc)
fromJSON(xpathSApply(rootNode,"//p",xmlValue))$result$routes[[1]]
fromJSON(xpathSApply(rootNode,"//p",xmlValue))$result$routes[[2]]
htmlParse("http://api.map.baidu.com/direction/v1?mode=transit&origin=江杨北路&destination=上海南站地铁站&region=上海&output=json&ak=q9U1lWgCK1aBGVC1DVWrgWa7")->doc
rootNode<-xmlRoot(doc)
fromJSON(xpathSApply(rootNode,"//p",xmlValue))$result$routes[[1]]
js1.3 = GetLineEcharts("3号线",origin3,destination3,input3,step = 2)
js = list(js1.1,js1.2,js1.3)
writeJS(js,"js/1-3.js")
ak = "q9U1lWgCK1aBGVC1DVWrgWa7"
setwd("C:/Users/Administrator/Desktop/my Pro/routes")
writeJS = function(js,file = "js/1-1.js"){
js.write = do.call(paste,js)
output  = paste0("(function () {
require.config({
paths: {
echarts:'http://echarts.baidu.com/doc/example/www/js'
},
packages: [
{
name: 'BMap',
location: 'http://echarts.baidu.com/extension/BMap/src',
main: 'main'
}
]
});
require(
[
'echarts',
'BMap',
'echarts/chart/map'
],
function (echarts, BMapExtension) {
$('#main').css({
height:$('body').height(),
width: $('body').width()
});
// 初始化地图
var BMapExt = new BMapExtension($('#main')[0], BMap, echarts,{
enableMapClick: false
});
var map = BMapExt.getMap();
var container = BMapExt.getEchartsContainer();
var startPoint = {
x: 121.4539,
y: 31.22940
};
var point = new BMap.Point(startPoint.x, startPoint.y);
map.centerAndZoom(point, 12);
map.enableScrollWheelZoom(true);
// 地图自定义样式
map.setMapStyle({
styleJson: [
{
'featureType': 'water',
'elementType': 'all',
'stylers': {
'color': '#044161'
}
},
{
'featureType': 'land',
'elementType': 'all',
'stylers': {
'color': '#004981'
}
},
{
'featureType': 'boundary',
'elementType': 'geometry',
'stylers': {
'color': '#064f85'
}
},
{
'featureType': 'railway',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'highway',
'elementType': 'geometry',
'stylers': {
'color': '#004981'
}
},
{
'featureType': 'highway',
'elementType': 'geometry.fill',
'stylers': {
'color': '#005b96',
'lightness': 1
}
},
{
'featureType': 'highway',
'elementType': 'labels',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'arterial',
'elementType': 'geometry',
'stylers': {
'color': '#004981'
}
},
{
'featureType': 'arterial',
'elementType': 'geometry.fill',
'stylers': {
'color': '#00508b'
}
},
{
'featureType': 'poi',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'green',
'elementType': 'all',
'stylers': {
'color': '#056197',
'visibility': 'off'
}
},
{
'featureType': 'subway',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'manmade',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'local',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'arterial',
'elementType': 'labels',
'stylers': {
'visibility': 'off'
}
},
{
'featureType': 'boundary',
'elementType': 'geometry.fill',
'stylers': {
'color': '#029fd4'
}
},
{
'featureType': 'building',
'elementType': 'all',
'stylers': {
'color': '#1a5787'
}
},
{
'featureType': 'label',
'elementType': 'all',
'stylers': {
'visibility': 'off'
}
}
]
});
option = {
color: ['gold','aqua','lime'],
title : {
text: '上海地铁',
subtext:'@Chiffon chiffon.gitcafe.io',
x:'center',
textStyle : {
color: '#fff'
}
},
tooltip : {
show: true,
trigger: 'item',
formatter: function (v) {
return v[1].replace(':', ' > ');
}
},
legend: {
orient: 'vertical',
x:'left',
data:['1号线', '2号线','3号线'],
selectedMode: 'single',
selected:{
'2号线' : false,
'3号线' :false
},
textStyle : {
color: '#fff'
}
},
toolbox: {
show : true,
orient : 'vertical',
x: 'right',
y: 'center',
feature : {
mark : {show: true},
dataView : {show: true, readOnly: false},
restore : {show: true},
saveAsImage : {show: true}
}
},
dataRange: {
min : 0,
max : 100,
range: {
start: 10,
end: 90
},
x: 'right',
calculable : true,
color: ['#ff3333', 'orange', 'yellow','lime','aqua'],
textStyle:{
color:'#fff'
}
},
series : [",
js.write,
"  ]
};
var myChart = BMapExt.initECharts(container);
window.onresize = myChart.onresize;
BMapExt.setOption(option);
}
);
})();")
locate = Sys.getlocale("LC_CTYPE")
Sys.setlocale("LC_CTYPE",
"Chinese (Simplified)_People's Republic of China.936")
write(output,file)
Sys.setlocale("LC_CTYPE", locate)
}
js = list(js1.1,js1.2,js1.3)
writeJS(js,"js/1-3.js")
js1.3
cat(js1.3)
x = rnorm(30, 70, 5)
t.test(x, mu=80)
