{
    "contents" : "#' Map charts\n#'\n#' ECharts style map charts. Only support CHINA now.\n#'\n#' @param dat    data.frame, rownames are province names.\n#' @param opt    option of ECharts.\n#' @return The HTML code as a character string.\n#' @export\n#' @examples\n#' testData <- read.csv(system.file(\"examples\", \"testDataForMap.csv\", package = \"recharts\"),stringsAsFactors=FALSE)\n#'\n#' eMap(testData, namevar=\"province\")\n#' city = mapNames(\"china\")\n#' value = sample(34)+rnorm(34,0,5)\n#' dat = data.frame(city, value)\n#' eMap(dat,namevar = \"city\")\n\neMap = function(dat, namevar=NULL, datavar=2:ncol(dat), size = NULL, region=\"china\", color=c(\"#1e90ff\", \"#f0ffff\"),\n\ttheme = \"default\", title = NULL, subtitle = NULL, title.x = \"center\", title.y = \"top\",\n\tlegend = TRUE, legend.x = \"left\", legend.y= \"top\", legend.orient=\"horizontal\",\n\ttoolbox = TRUE, toolbox.orient = \"horizontal\", toolbox.x = \"right\", toolbox.y = \"top\",\n\tdataRange = TRUE, dataRange.x=\"left\", dataRange.y=\"bottom\", dataRange.min=NULL, dataRange.max=NULL,\n\tdataRange.calculable=TRUE, dataRange.text=c(\"high\", \"low\"), dataRange.orient=\"horizontal\",\n\tdataView = FALSE, readOnly = FALSE, mark=TRUE, dataZoom=FALSE,\n\ttooltip = TRUE, tooltip.trigger=\"item\", formatter=\"\",\n\tcalculable=FALSE, xlab = NULL, ylab=NULL,\n\tshowLabel=TRUE, opt = list()) {\n\n\tif(class(datavar) == \"integer\" | class(datavar) == \"numeric\"){\n\t\tdatavar = colnames(dat)[datavar]\n\t\tdatavar = datavar[!is.na(datavar)]\n\t}else{\n\t\tdatavar = datavar[datavar%in%colnames(dat)]\n\t}\n\tprint(datavar)\n\tif (missing(namevar)| is.null(namevar)){\n# \t\tinsertColumn <- rownames(dat)\n# \t\tdat <- cbind(insertColumn, dat)\n# \t\tcolnames(dat)[1] <- \"region\"\n\t\tnamevar = colnames(dat)[1]\n\t}\n\n\tif(length(namevar) > 1) namevar=namevar[1]\n\tif(class(namevar) == \"integer\" | class(namevar) == \"numeric\"){\n\t\tnamevar = colnames(dat)[as.numeric(namevar)]\n\t}else if(!namevar %in% colnames(dat)){\n\t\tnamevar = colnames(dat)[1]\n\t}\n\n\tif(length(datavar) == 0) datavar = colnames(dat)[2]\n\tif(length(namevar) == 0) namevar = colnames(dat)[1]\n\n\tvalidData <- dat[,c(namevar, datavar)]\n\n\t# legendData set\n\tlegendData <- datavar\n\topt$legend = recharts:::legendSet(show=legend, data=legendData, legend.x=legend.x, legend.y=legend.y, orient=legend.orient)\n\n\tvalueDf <- dat[,datavar]\n\n\t# option$title format.\n\topt$title = recharts:::tilteSet(title = title, subtitle=subtitle,\n\t\t\ttitle.x = title.x, title.y = title.y)\n\topt$theme = themeSet(theme = theme)\n\topt$calculable = recharts:::calculableSet(calculable = calculable)\n\n\t# opt$tooltip format, not open to user now.\n\topt$tooltip = recharts:::tooltipSet( tooltip=tooltip,trigger=tooltip.trigger,\n\t\t\tformatter = \"\", islandFormatter=\"\")\n\n\topt$toolbox = recharts:::toolboxSet(toolbox=toolbox, toolbox.x=toolbox.x, toolbox.y=toolbox.y, orient=toolbox.orient,\n\t\t\t\tdataView=dataView, mark=mark, dataZoom = dataZoom, magicType=FALSE, restore = TRUE, readOnly = readOnly,\n\t\t\t\tsaveAsImage=TRUE)\n\n\tif(missing(dataRange.min)|is.null(dataRange.min)){\n\t\tdataRange.min=min(validData[,datavar], na.rm = TRUE)\n\t}\n\n\tif(missing(dataRange.max)|is.null(dataRange.max)){\n\t\tdataRange.max=max(validData[,datavar], na.rm = TRUE)\n\t}\n\n\topt$dataRange = recharts:::dataRangeSet(dataRange=dataRange, calculable=dataRange.calculable, dataRange.x=dataRange.x, dataRange.y=dataRange.y,\n\t\tdataRange.text = dataRange.text, color=color, precision=1, orient=dataRange.orient, min=dataRange.min, max=dataRange.max)\n\n\topt$series =  vector(\"list\", length(datavar))\n    for(i in 1:length(datavar)){\n\t\toutputData <- list()\n\t\t#print(datavar[i])\n\t\toutputData <- lapply(1:nrow(validData), FUN = function(X){\n\t\t\tlist( name= validData[X, namevar], value = validData[X, datavar[i]])\n\t\t})\n\n\t\topt$series[[i]] = list(\n\t\t\tname = datavar[i],\n\t\t\ttype = \"map\",\n\t\t\tmapType = region,\n\t\t\titemStyle = list(\n\t\t\t\tnormal = list(\n\t\t\t\t\tlabel = list(show=showLabel)\n\t\t\t\t)\n\t\t\t),\n\t\t\tdata = outputData\n\t\t)\n\t}\n\n\n\topt$size = size\n\n\t### output list format\n\tchart = htmlwidgets::createWidget(\n\t\t'echarts', opt, width = size[1], height = size[2], package = 'recharts'\n\t)\n\tchart\n}\n",
    "created" : 1453564776426.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3206662585",
    "id" : "6C0FF6E0",
    "lastKnownWriteTime" : 1454549345,
    "path" : "E:/git/REmap/R/eMap.R",
    "project_path" : "R/eMap.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}