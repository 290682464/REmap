{
    "contents" : "##' Create a choropleth map object\n##'\n##' remapC uses a data frame create a remap object\n##' which can be used by plot to see the map by browser\n##'\n##' mapdata should be a dataframe which including two columns,\n##' the first column is the names of places,\n##' second column is value.\n##'\n##' @usage\n##' remapC(data,\n##'        maptype = 'china',\n##'       markLineData = NULL,\n##'       markPointData = NULL,\n##'       color = c('#1e90ff','#f0ffff'),\n##'       theme = get_theme(\"Bright\"),\n##'       title = \"\",\n##'       subtitle = \"\",\n##'       markLineTheme = markLineControl(),\n##'       markPointTheme = markPointControl(),\n##'       geoData = NA,\n##'       mindata = NA,\n##'       maxdata = NA)\n##'\n##'\n##' @param data   a data frame including place names and values\n##' @param maptype the type of the map. For example,'china',\n##' 'world' or other names of province in China.\n##' @param title    a character string of the title\n##' @param subtitle    a character string of the subtitle\n##' @param theme    a list object created by get_theme,control\n##' the color of the map.\n##' @param color   vector of the color, if the length of color is\n##' 1, white will be added to the color.\n##' @param markLineData   data for mark line\n##' @param markPointData   data for mark point\n##' @param markLineTheme  theme for mark line\n##' @param markLineTheme  theme for mark point\n##' @param geoData geoData for markLine and markPoint format is\n##' similar as get_geo_position()\n##' @param mindata  mindata for legend\n##' @param maxdata  maxdata for legend\n##' @return An remap object\n##' @author Chiffon <\\url{http://chiffon.gitcafe.io}>\n##' @examples\n##' data = data.frame(country = mapNames(\"world\"),\n##'                    value = 5*sample(178)+200)\n##' head(data)\n##' out = remapC(data,maptype = \"world\",color = 'skyblue')\n##' plot(out)\n##'\n##' remapC(chinaIphone,\n##'         markLineData = demoC,\n##'         markPointData = demoC[,2])\n\nremapC = function(data,\n                  maptype = 'china',\n                  markLineData = NULL,\n                  markPointData = NULL,\n                  color = c('#1e90ff','#f0ffff'),\n                  theme = get_theme(\"Bright\"),\n                  title = \"\",\n                  subtitle = \"\",\n                  markLineTheme = markLineControl(),\n                  markPointTheme = markPointControl(),\n                  geoData = NA,\n                  mindata = NA,\n                  maxdata = NA){\n\n  if(.Platform$OS.type == \"windows\"){\n    locate = Sys.getlocale(\"LC_CTYPE\")\n    Sys.setlocale(\"LC_CTYPE\",\"eng\")\n  }\n\n  if(!is.data.frame(data)){\n    stop(\"Map data should be a data frame.\")\n  }\n\n  data = na.omit(data)\n\n  if(ncol(data)<2 | nrow(data) == 0 ){\n    stop(\"Data should have at least 2 columns and 1 row\")\n  }\n\n  if(!is.character(data[1,1])){\n    data[,1] = as.character(data[,1])\n  }\n\n  if(!is.numeric(data[1,2])){\n    stop(\"Column 2 should be numeric!\")\n  }\n\n  maptype = checkMapName(maptype)\n  mapnames = mapNames(mapType = maptype)\n#   hit = sum(sapply(data[,1],function(x)\n#               sum(x %in% mapnames)))/length(mapnames)\n#\n#   if(hit<0.5){\n#     warning(paste0(\"Over 50% places(column 1) are not found in \",maptype))\n#   }\n\n  if(is.null(data$tooltip)){\n  mapCVec = apply(data,1,function(x)\n    paste0(\"{name:'\",x[1],\n           \"',value:\",x[2],\"}\" ))\n  }else{\n    mapCVec = apply(data,1,function(x)\n      paste0(\"{name:'\",x[1],\n             \"',value:\",x[2],\",tooltipValue:\",x[3],\"}\" ))\n  }\n\n\n  mapCData = paste(mapCVec,collapse = ',\\n\\t\\t')\n\n  if(class(color) != 'character'){\n    stop(\"Color should be a character object!\")\n  }\n\n  if(length(color) == 1){\n    color = c(color,'white')\n  }\n\n  ColorData = paste0(\"['\",paste(color,collapse = \"', '\"),\"']\")\n\n\n  if(is.na(maxdata)){\n    maxData = round(max(data[,2]) +\n                    (max(data[,2])- min(data[,2]))/15)\n  }else{\n    maxData = maxdata\n  }\n\n  if(is.na(mindata)){\n    minData = round(min(data[,2]) -\n      (max(data[,2])- min(data[,2]))/15)\n  }else{\n    minData = mindata\n  }\n\n  markLineLogi = (length(dim(markLineData)) ==2)\n  markPointLogi = class(markPointData)!='logical'\n  geoDataLogi = class(geoData)!='logical'\n\n\n  if(markLineLogi & markPointLogi & !geoDataLogi){\n    cityNames = c(as.character(markLineData[,1]),\n                  as.character(markLineData[,2]))\n    if(is.data.frame(markPointData)){\n      cityNames = c(cityNames,\n                    as.character(markPointData[,1]))\n    }else{\n      # it's a vector\n      cityNames = c(cityNames,\n                    as.character(markPointData))\n    }\n\n    geoData = get_geo_position(unique(cityNames))\n  }\n\n\n\n  ## Prepare for mark Line data\n  if(is.null(markLineData)){\n    markLineData = \"\"\n  }else{\n    markLineData = markLineStr(markLineData,\n                               markLineTheme,\n                               geoData)\n  }\n\n  ## Prepare for mark point data\n  if(is.null(markPointData)){\n    markPointData = \"\"\n  }else{\n    markPointData = markPointStr(markPointData,\n                                 markPointTheme,\n                                 geoData)\n  }\n\n\n  if(maptype == 'world'){\n    theme$labelShow = 'false'\n  }\n  ### write remap object\n  output = new(\"remap\")\n  output@id = paste('ID', format(Sys.time(), \"%Y%m%d%H%M%S\"),\n                    proc.time()[3]*100, sep=\"_\")\n  output@theme = theme\n  output@maptype = \"SVG\"\n\n  output@option = html.data.C$option\n  head = html.data.C$head\n  foot = html.data.C$foot\n\n  if(.Platform$OS.type == \"windows\"){\n    Sys.setlocale(\"LC_CTYPE\",\n                  \"chs\")\n  }\n\n  output@option = sub(\"forChange\",\n                      \"ä¸€\",output@option)\n\n  ##V0.2: label&point\n  output@option = sub(\"labelShowData\",\n                       theme$labelShow,output@option)\n  output@option = sub(\"pointShowData\",\n                      theme$pointShow,output@option)\n  output@option = sub(\"pointColorData\",\n                      theme$pointColor,output@option)\n\n  ## end V0.2\n  output@option = gsub(\"backgroundColorData\",\n                      theme$backgroundColor,output@option)\n  output@option = sub(\"titleData\",title,output@option)\n  output@option = sub(\"subtitleData\",subtitle,output@option)\n  output@option = gsub(\"titleColorData\",\n                       theme$titleColor,output@option)\n\n  output@option = sub(\"minData\",minData,output@option)\n  output@option = sub(\"maxData\",maxData,output@option)\n  output@option = sub(\"colorData\",ColorData,output@option)\n  output@option = sub(\"mapTypeData\",maptype,output@option)\n  output@option = sub(\"borderColorData\",\n                      theme$borderColor,output@option)\n\n  output@option = sub(\"mapCData\",mapCData,output@option)\n\n\n  output@option = sub(\"//markLineData\",\n                      markLineData,output@option)\n  output@option = sub(\"//markPointData\",\n                      markPointData,output@option)\n\n  output@option = strsplit(output@option,\"kkkmmm\")[[1]][2]\n  output@content =  paste(head,output@option,foot,sep = \"\\n\")\n\n  if(.Platform$OS.type == \"windows\"){\n    Sys.setlocale(\"LC_CTYPE\",locate)\n  }\n  return(output)\n\n\n\n}\n\n\n\n\nhtml.data.C = list(\n  head = \"<html>\n  <head>\n  <meta charset=\\\"utf-8\\\">\n  <style type=\\\"text/css\\\">\n  body {\n  margin: 0;\n  }\n  #main {\n  height: 100%;\n  }\n  </style>\n  </head>\n  <body>\n  <div id=\\\"main\\\"></div>\n  <script src=\\\"http://echarts.baidu.com/build/dist/echarts.js\\\"></script>\n  <script src = \\\"http://echarts.baidu.com/build/dist/echarts-all.js\\\"></script>\n  <script>\n  var myChart = echarts.init(document.getElementById(\\\"main\\\"));\n\n  var options = \" ,\n  option = \"forChangekkkmmm{\n  backgroundColor: 'backgroundColorData',\n  color: ['pointColorData','aqua','lime'],\n  title : {\n    text: 'titleData',\n    subtext:'subtitleData',\n    x:'center',\n    textStyle : {\n      color: 'titleColorData'\n    }\n  },\n  tooltip : {\n    trigger: 'item',\n    formatter: function (v) {\n\t\t\tif(typeof(v[2])=='number'){\n\t\t\treturn(v[1]+': '+v[2])\n\t\t\t}else if(v[2].tooltipValue!=null){\n          \treturn v[2].tooltipValue;\n          }else{\n            return v[1];\n          }\n  }},\n    legend: {\n        show:pointShowData,\n        orient: 'vertical',\n        x:'left',\n        data:['Data'],\n      \ttextStyle:{color:'backgroundColorData'}\n\n    },\n  toolbox: {\n    show : true,\n    orient : 'vertical',\n    x: 'right',\n    y: 'center',\n    feature : {\n      mark : {show: true},\n      dataView : {show: true, readOnly: false},\n      restore : {show: true},\n      saveAsImage : {show: true}\n    }\n  },\n  dataRange: {\n    min : minData,\n    max : maxData,\n    calculable : true,\n    color: colorData,\n    textStyle:{\n      color:'titleColorData'\n    }\n  },\n  series : [\n    {\n    name:'Data',\n    type:'map',\n    mapType: 'mapTypeData',\n    itemStyle:{\n    normal:{\n    borderColor:'borderColorData',\n    borderWidth: 0.5,\n    label:{show:labelShowData,textStyle:{color:'titleColorData'}},\n    },\n    emphasis:{label:{show:true,textStyle:{color:'titleColorData'}}}\n  },\n  data:[mapCData]\n  //markLineData\n  //markPointData\n  }]\n}\",\n  foot = \";\n  myChart.setOption(options);\n  </script>\n  </body>\n  </html>\"\n  )\n\ncheckMapName = function(maptype){\n  logi = maptype == mapCList[[37]]\n  return(names(mapCList)[which(logi)[1]%%37])\n}\n",
    "created" : 1445257682414.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2041801802",
    "id" : "43FBA538",
    "lastKnownWriteTime" : 1445258114,
    "path" : "E:/git/REmap/R/remapC.R",
    "project_path" : "R/remapC.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}