{
    "contents" : "##' Plot REmap in shiny\n##'\n##' @description\n##' Function for plotting REmap in shiny\n##'\n##' @usage\n##' REmapOutput(outputId, inline = FALSE, container,...)\n##' renderREmap(expr, env = parent.frame(), quoted = FALSE, func = NULL)\n##'\n##' @details\n##' USe renderREmap render an REmap object and use REmapOutput\n##' output an REmap object. See more details in shiny package.\n##'\n##' @examples\n##' library(REmap)\n##' library(shiny)\n##' runApp(\"\")\nREmapOutput =function (outputId, inline = FALSE, container = if (inline) span else div,\n                       ...)\n{\n  div(includeHTML(remap.shiny.init()),\n  container(id = outputId, class = \"shiny-html-output\", ...))\n}\n\nrenderREmap = function (expr, env = parent.frame(), quoted = FALSE, func = NULL)\n{\n  if (!is.null(func)) {\n    shinyDeprecated(msg = \"renderUI: argument 'func' is deprecated. Please use 'expr' instead.\")\n  }\n  else {\n    installExprFunction(expr, \"func\", env, quoted)\n  }\n  markRenderFunction(uiOutput, function(shinysession, name,\n                                        ...) {\n    result <- func()\n    if (is.null(result) || length(result) == 0)\n      return(NULL)\n\n    output = intoHtmlObject(result)\n    output <- htmltools::takeSingletons(output, shinysession$singletons,\n                             desingleton = FALSE)$ui\n    output <- htmltools::surroundSingletons(output)\n#     dependencies <- lapply(resolveDependencies(findDependencies(output)),\n#                            createWebDependency)\n#    names(dependencies) <- NULL\n    output <- list(html = htmltools::doRenderTags(output), deps = NULL)\n    return(output)\n\n  })\n}\n\nintoHtmlObject = function(object,\n                          height = \"500px\",\n                          width = \"100%\"){\n\n\n  if(.Platform$OS.type == \"windows\"){\n    locate = Sys.getlocale(\"LC_CTYPE\")\n    Sys.setlocale(\"LC_CTYPE\",\n                  \"chs\")\n\n  }\n\n  if(object@maptype == \"Bmap\"){\n\n    foot = sub(\"optionNameData\",\n               paste0(\"option\", object@id), html.knitr.list$Bmap.foot)\n    ##write Bmap content\n    content = paste0(html.knitr.list$Bmap.head,\n                     object@option,\n                     foot)\n\n\n    content = sub(\"#main\",\n                  paste0(\"#\",object@id)\n                  ,content)\n\n\n  }else if(object@maptype == \"SVG\"){\n    head = sub(\"optionNameData\",\n               paste0(\"option\", object@id), html.knitr.list$SVG.head)\n\n    foot = sub(\"optionNameData\",\n               paste0(\"option\", object@id), html.knitr.list$SVG.foot)\n\n    ## write SVG content\n    content = paste0(head,\n                     object@option,\n                     foot)\n\n    content = sub(\"main\",\n                  object@id\n                  ,content)\n\n  }else if(object@maptype == \"SVGH\"){\n\n    foot = sub(\"optionNameData\",\n               paste0(\"option\", object@id), html.knitr.list$SVGH.foot)\n\n    ## write SVG content\n    content = paste0(html.knitr.list$SVGH.head,\n                     object@option,\n                     foot)\n\n    content = sub(\"main\",\n                  object@id\n                  ,content)\n\n  }\n\n\n\n\n  if(.Platform$OS.type == \"windows\"){\n    Sys.setlocale(\"LC_CTYPE\",locate)\n  }\n\n\n\n\n    htmltools::tagList(\n      ### initial for echarts svg\n      htmltools::tag(\"div\",list(\n        id = object@id,\n        style = sprintf(\"height:%s; width:%s\",height,width))),\n      htmltools::tag(\"script\",list(\n        content)))\n\n}\n\n\nremap.shiny.init = function(){\n  return(file.path(system.file(\"shiny\", package = \"REmap\"),  \"remapWidget.html\" ))\n\n}\n",
    "created" : 1458649219951.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2209910154",
    "id" : "CE3E940B",
    "lastKnownWriteTime" : 1458649829,
    "path" : "E:/git/REmap/R/renderREmap.R",
    "project_path" : "R/renderREmap.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}